pipeline {
	agent {
		dockerfile {
			filename "pipeline/jenkins/Dockerfile"
			args "--entrypoint=''"
		}
	}
	environment {
		LC_ALL='en_US.UTF-8'
		LANG='en_US.UTF-8'
	}
	stages {
		stage('Build API') {
			steps {
				sh "npm i"
			}
		}
		stage('Istanbul') {
            steps {
				script {
					env.JUNIT_REPORT_PATH = 'reports/report.xml'
					// env.JUNIT_REPORT_PATH = '/report.xml'
				}
				//echo "${env.JUNIT_REPORT_PATH}" 

                // beggining of xml report tags
				sh "cd $WORKSPACE"
				sh '''
					cd $WORKSPACE
					rm -rf reports
					mkdir reports
					touch ./reports/report.xml
					echo '<testsuites name="Mocha Tests">' >> ./reports/report.xml
					echo '	<testsuite name="For Jenkins" tests="3" errors="0" failures="0" skipped="0" timestamp="2019-11-26T21:32:43" time="0.004">' >> ./reports/report.xml
					pwd
					cat ./reports/report.xml
				'''
				//sh "cat reports/report.xml"

				sh 'npm install nyc'
				sh 'npm install mocha'
				echo 'Istanbul installed'
				sh 'set +e' // this should help Jenkins not crash
				sh 'npm run coverage:unit || true'
				sh 'set -e' // this should help Jenkins not crash
				echo 'coverage:unit script ran'
                // middle of xml report tags
				sh '''
					failingTest='false'
					linePrint () 
					{
						myReg=$(echo $1 | awk 'match($0, /pic high|pic low/) {print substr($0, RSTART, RLENGTH)}')
						coverageName=$(echo $1 | awk 'match($0, /data-value="[^"]+/) {print substr($0, RSTART + 12, RLENGTH - 12)}')
						percent=$(echo $1 | awk 'match($0, /data-value="[0-9][0-9][.][0-9][0-9]|data-value="[0-9][.][0-9][0-9]|data-value="[0-9][0-9][0-9]|data-value="[0-9][0-9]|data-value="[0-9]/) {print substr($0, RSTART + 12, RLENGTH - 12)}')
						myName='name="'$myReg' '$percent'% coverage: '$coverageName'"'
						qt='"'

						if [ "$myReg" = "pic high" ] 
						then
							echo "MYREG is pic high"
							echo "      <testcase classname=${qt}Istanbul Coverage$qt $myName time=${qt}0$qt>" >> ./reports/report.xml
							echo "			<system-out><![CDATA[$1 $2]]></system-out>" >> ./reports/report.xml
							echo '		</testcase>' >> ./reports/report.xml
						elif [ "$myReg" = "pic low" ]
						then
							echo "MYREG is pic low"

							#failingTest='true'
                            #sed -i '1s/^/true/' ./failingTestVariableFileIstanbul
                            #echo "true" | ./failingTestVariableFileIstanbul
                            echo "true" >> ./failingTestVariableFileIstanbul

							echo "      <testcase classname=${qt}Istanbul Coverage$qt $myName time=${qt}0$qt status=${qt}Failed$qt>" >> ./reports/report.xml
							echo '			<failure message="Coverage Percentage is below 80%"></failure>' >> ./reports/report.xml
							echo "			<system-out><![CDATA[$1 $2]]></system-out>" >> ./reports/report.xml
							echo '		</testcase>' >> ./reports/report.xml
						elif [ "$myReg" = "" ];
						then
							echo "MYREG is empty"
						fi

						echo "==============================\n"
					}
					
					prevLine='none'
                    echo "false" >> ./failingTestVariableFileIstanbul # if this gets set to true, then the build fails (Istanbul < 80%)
					while read -r line; do linePrint "$line" "$prevLine"; prevLine="$line"; done < coverage/index.html
				'''

                // closing of xml report tags
				sh '''
					echo '	</testsuite>' >> ./reports/report.xml
					echo '</testsuites>' >> ./reports/report.xml
				'''
				
				// If there is an istanbul test below 80%, the folowing code should fail the pipeline
                // turn on following code to make failing tests fail the build
				sh '''
                    #failingTest=`cat ./failingTestVariableFileIstanbul`
                    #failingTest=$(cut -c1-4 < ./failingTestVariableFileIstanbul)
                    if grep -q "true" "./failingTestVariableFileIstanbul"; then
                        echo "true" >> ./failingTestVariableFileIstanbulFinal
                        failingTest="true"
                    else
                        echo "false" >> ./failingTestVariableFileIstanbulFinal
                        failingTest="false"
                    fi
                    echo "failingTest: "
                    echo "$failingTest"
					if [ "$failingTest" = "true" ] 
					then
                        echo "failing the build because Istanbul is below 80%"
						#false
                    else
                        echo "Istanbul coverage is above 80%"
					fi
				'''
            }
		}
		stage('Test') {
			steps {
				echo "Run tests"
				sh "mongo --version"
				sh "mongod &"
				sh "sleep 30s"
				sh "npm test"
			}
		}
		stage('Deploy') {
			steps {
				sh "tar -czf /tmp/tsq.tar.gz ."
				sh "scp -r -o StrictHostKeyChecking=no -i /home/.ssh/rigel-alpha.pem /tmp/tsq.tar.gz ec2-user@stage.developerlevel.com:/home/ec2-user/tsq/pipeline/prod/"
				sh "ssh -o StrictHostKeyChecking=no -i /home/.ssh/rigel-alpha.pem ec2-user@stage.developerlevel.com 'cd tsq && /usr/bin/git pull'"
				sh "ssh -o StrictHostKeyChecking=no -i /home/.ssh/rigel-alpha.pem ec2-user@stage.developerlevel.com source /home/ec2-user/tsq/pipeline/prod/docker-build.sh"
			}
		}
	}	
	post {
        always {
            sh "cat ${env.JUNIT_REPORT_PATH}"
            echo "${env.JUNIT_REPORT_PATH}"
            junit "${env.JUNIT_REPORT_PATH}"
        }
	}
}
